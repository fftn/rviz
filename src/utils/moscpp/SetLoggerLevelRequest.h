// Generated by gencpp from file moscpp/SetLoggerLevelRequest.msg
// DO NOT EDIT!


#ifndef MOSCPP_MESSAGE_SETLOGGERLEVELREQUEST_H
#define MOSCPP_MESSAGE_SETLOGGERLEVELREQUEST_H


#include <string>
#include <vector>
#include <map>

#include "mos_types.h"
#include "mos_serialization.h"
#include "mos_builtin_message_traits.h"
#include "mos_message_operations.h"


namespace moscpp
{
template <class ContainerAllocator>
struct SetLoggerLevelRequest_
{
  typedef SetLoggerLevelRequest_<ContainerAllocator> Type;

  SetLoggerLevelRequest_()
    : logger()
    , level()  {
    }
  SetLoggerLevelRequest_(const ContainerAllocator& _alloc)
    : logger(_alloc)
    , level(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _logger_type;
  _logger_type logger;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _level_type;
  _level_type level;





  typedef boost::shared_ptr< ::moscpp::SetLoggerLevelRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moscpp::SetLoggerLevelRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetLoggerLevelRequest_

typedef ::moscpp::SetLoggerLevelRequest_<std::allocator<void> > SetLoggerLevelRequest;

typedef boost::shared_ptr< ::moscpp::SetLoggerLevelRequest > SetLoggerLevelRequestPtr;
typedef boost::shared_ptr< ::moscpp::SetLoggerLevelRequest const> SetLoggerLevelRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moscpp::SetLoggerLevelRequest_<ContainerAllocator> & v)
{
mos::message_operations::Printer< ::moscpp::SetLoggerLevelRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::moscpp::SetLoggerLevelRequest_<ContainerAllocator1> & lhs, const ::moscpp::SetLoggerLevelRequest_<ContainerAllocator2> & rhs)
{
  return lhs.logger == rhs.logger &&
    lhs.level == rhs.level;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::moscpp::SetLoggerLevelRequest_<ContainerAllocator1> & lhs, const ::moscpp::SetLoggerLevelRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace moscpp

namespace mos
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::moscpp::SetLoggerLevelRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moscpp::SetLoggerLevelRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moscpp::SetLoggerLevelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moscpp::SetLoggerLevelRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moscpp::SetLoggerLevelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moscpp::SetLoggerLevelRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moscpp::SetLoggerLevelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51da076440d78ca1684d36c868df61ea";
  }

  static const char* value(const ::moscpp::SetLoggerLevelRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51da076440d78ca1ULL;
  static const uint64_t static_value2 = 0x684d36c868df61eaULL;
};

template<class ContainerAllocator>
struct DataType< ::moscpp::SetLoggerLevelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moscpp/SetLoggerLevelRequest";
  }

  static const char* value(const ::moscpp::SetLoggerLevelRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moscpp::SetLoggerLevelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string logger\n"
"string level\n"
;
  }

  static const char* value(const ::moscpp::SetLoggerLevelRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace mos

namespace mos
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moscpp::SetLoggerLevelRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.logger);
      stream.next(m.level);
    }

    MOS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetLoggerLevelRequest_

} // namespace serialization
} // namespace mos

namespace mos
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moscpp::SetLoggerLevelRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moscpp::SetLoggerLevelRequest_<ContainerAllocator>& v)
  {
    s << indent << "logger: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.logger);
    s << indent << "level: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.level);
  }
};

} // namespace message_operations
} // namespace mos

#endif // MOSCPP_MESSAGE_SETLOGGERLEVELREQUEST_H
