// Generated by gencpp from file mosgraph_msgs/Clock.msg
// DO NOT EDIT!


#ifndef MOSGRAPH_MSGS_MESSAGE_CLOCK_H
#define MOSGRAPH_MSGS_MESSAGE_CLOCK_H


#include <string>
#include <vector>
#include <map>

#include "mos_types.h"
#include "mos_serialization.h"
#include "mos_builtin_message_traits.h"
#include "mos_message_operations.h"


namespace mosgraph_msgs
{
template <class ContainerAllocator>
struct Clock_
{
  typedef Clock_<ContainerAllocator> Type;

  Clock_()
    : clock()  {
    }
  Clock_(const ContainerAllocator& _alloc)
    : clock()  {
  (void)_alloc;
    }



   typedef mos::Time _clock_type;
  _clock_type clock;





  typedef boost::shared_ptr< ::mosgraph_msgs::Clock_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mosgraph_msgs::Clock_<ContainerAllocator> const> ConstPtr;

}; // struct Clock_

typedef ::mosgraph_msgs::Clock_<std::allocator<void> > Clock;

typedef boost::shared_ptr< ::mosgraph_msgs::Clock > ClockPtr;
typedef boost::shared_ptr< ::mosgraph_msgs::Clock const> ClockConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mosgraph_msgs::Clock_<ContainerAllocator> & v)
{
mos::message_operations::Printer< ::mosgraph_msgs::Clock_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mosgraph_msgs::Clock_<ContainerAllocator1> & lhs, const ::mosgraph_msgs::Clock_<ContainerAllocator2> & rhs)
{
  return lhs.clock == rhs.clock;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mosgraph_msgs::Clock_<ContainerAllocator1> & lhs, const ::mosgraph_msgs::Clock_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mosgraph_msgs

namespace mos
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mosgraph_msgs::Clock_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mosgraph_msgs::Clock_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mosgraph_msgs::Clock_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mosgraph_msgs::Clock_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mosgraph_msgs::Clock_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mosgraph_msgs::Clock_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mosgraph_msgs::Clock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a9c97c1d230cfc112e270351a944ee47";
  }

  static const char* value(const ::mosgraph_msgs::Clock_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa9c97c1d230cfc11ULL;
  static const uint64_t static_value2 = 0x2e270351a944ee47ULL;
};

template<class ContainerAllocator>
struct DataType< ::mosgraph_msgs::Clock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mosgraph_msgs/Clock";
  }

  static const char* value(const ::mosgraph_msgs::Clock_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mosgraph_msgs::Clock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# moslib/Clock is used for publishing simulated time in MOS. \n"
"# This message simply communicates the current time.\n"
"# For more information, see http://www.move-new.com/wiki/Clock\n"
"time clock\n"
;
  }

  static const char* value(const ::mosgraph_msgs::Clock_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace mos

namespace mos
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mosgraph_msgs::Clock_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.clock);
    }

    MOS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Clock_

} // namespace serialization
} // namespace mos

namespace mos
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mosgraph_msgs::Clock_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mosgraph_msgs::Clock_<ContainerAllocator>& v)
  {
    s << indent << "clock: ";
    Printer<mos::Time>::stream(s, indent + "  ", v.clock);
  }
};

} // namespace message_operations
} // namespace mos

#endif // MOSGRAPH_MSGS_MESSAGE_CLOCK_H
